export function geminiExtractMessageAndTagsPrompt({ ocrText }: { ocrText: string }) {
    return [
        'You are an expert at analyzing screenshots of chat messages from messaging apps like WhatsApp, Telegram, and SMS.',
        "Your job is to extract the main message content and detect userTags based on the screenshot's OCR text.",
        '',
        'OCR TEXT:',
        '"""',
        ocrText,
        '"""',
        '',
        'Instructions:',
        "- The first visible line(s) in the OCR text are usually the sender's name or phone number. If the sender is a phone number or an unknown contact (not a saved name), set FROM_UNKNOWN to true.",
        "- If the message contains phrases like 'forwarded' or 'forwarded many times', set FORWARDED_MANY_TIMES to true.",
        '- If the message references an attached file (e.g., mentions of file extensions like .pdf, .docx, .jpg, .png, .mp4, .apk, .zip, etc.), set ATTACHED_FILE to true.',
        '- Only use these userTags: FROM_UNKNOWN, FORWARDED_MANY_TIMES, ATTACHED_FILE.',
        '- The main message is the actual chat content, not the sender or metadata.',
        '',
        'Return a JSON object with:',
        '- message: string (the main chat message)',
        '- userTags: array of strings (any of the above tags that apply)',
        '- success: true | false (true if extraction is confident, false if not)',
        '- error: string (empty if success, otherwise a short error message)',
        '',
        'Example output:',
        '{',
        '  "message": "Your KYC is pending. Please update now.",',
        '  "userTags": ["FROM_UNKNOWN", "FORWARDED_MANY_TIMES"],',
        '  "success": true,',
        '  "error": ""',
        '}',
    ].join('\n');
}
